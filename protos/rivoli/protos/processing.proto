syntax = "proto3";
package rivoli.protos.processing;

message File {
  // This is a 4-btye (sequential) integer so that it can be used as part of
  // the (optimized) Record ID.
  uint32 id = 1;

  string partnerId = 15;
  bool development_file = 18;

  bytes hash = 2;
  uint64 sizeBytes = 3;
  string name = 12;
  string location = 11;

  uint32 created = 4;
  uint32 updated = 5;

  Status status = 6;
  bool requiresReview = 9;

  string fileTypeId = 7;

  repeated string headerColumns = 16;

  // Also included in the tags, but we might need to index and/or query
  // this field
  string fileDate = 17;
  map<string, string> tags = 13;

  repeated OutputInstance outputs = 21;

  repeated ProcessingLog log = 8;
  repeated ProcessingLog recentErrors = 20;

  RecordStats stats = 14;
  RecordTimes times = 19;

  enum Status {
    FILE_STATUS_UNKNOWN = 0;
    NEW = 5;

    LOADING = 10;
    LOAD_ERROR = 12;
    LOADED = 15;

    PARSING = 20;
    PARSE_ERROR = 22;
    PARSED = 25;

    VALIDATING = 30;
    VALIDATE_ERROR = 32;
    VALIDATED = 35;

    AGGREGATING = 40;
    AGGREGATE_ERROR = 42;
    AGGREGATED = 45;

    WAITING_APPROVAL_TO_UPLOAD = 50;
    APPROVED_TO_UPLOAD = 51;

    UPLOADING = 60;
    UPLOADING_RESTARTING = 61;
    UPLOADING_RETRY_PAUSE = 62;
    UPLOAD_ERROR = 70;
    UPLOADED = 80;

    REPORTING = 100;
    REPORT_ERROR = 110;
    REPORTED = 120;

    COMPLETED = 500;
  }
}

message Record {
  // Encapsulates File + Row Number
  // Should be bytes, but mongodb can't handle wildcard searches on bytes,
  // so this will be two uint32s, where the record id is a sequential-ish
  // number (only for uniqueness purposes) while the lower 4 bytes are the
  // number. 32 + 32 is a bit overkill, but 32 total bits wouldn't be enough.
  uint64 id = 1;

  bytes hash = 2;

  // Enum value or a RecordType ID, which is uint32
  RecordTypeRef recordType = 3;

  Status status = 5;
  bool autoRetry = 17;
  uint32 retryCount = 18;

  string sharedKey = 11;

  // should be a oneof, but oneof's don't allIow repeated fields
  string rawLine = 6;
  repeated string rawColumns = 7;

  // validated will often be the same as parsed. maybe have a flag?
  map<string, string> parsedFields = 8;
  map<string, string> validatedFields = 9;
  map<string, string> aggregatedFields = 10;

  repeated ProcessingLog log = 12;
  repeated ProcessingLog recentErrors = 13;

  string uploadConfirmationId = 14;

  enum Status {
    RECORD_STATUS_UNKNOWN = 0;

    LOAD_ERROR = 10;
    LOADED = 20;

    PARSE_ERROR = 30;
    PARSED = 40;

    VALIDATION_ERROR = 50;
    VALIDATED = 60;

    UPLOAD_ERROR = 70;
    UPLOADED = 80;
  }

  enum RecordTypeRef {
    RECORDTYPE_UNKNOWN = 0;
    HEADER = 1;
  }
}

// Most log entries will be ProcessingLogs attached to the FileRecord; this is
// used for the Copier module, which might not create FileRecords.
message CopyLog {
  string partnerId = 1;
  uint32 time = 2;

  repeated EvaluatedFile files = 3;

  message EvaluatedFile {
    string name = 1;
    uint64 sizeBytes = 2;

    Resolution resolution = 3; // better name?
    // action = NO_MATCH, FILE_EXISTS (id), COPIED (id)

    string fileTypeId = 4;
    uint32 fileId = 5;

    enum Resolution {
      RESOLUTION_UNKNOWN = 0;
      NO_MATCH = 1;
      FILE_EXISTS = 2;
      COPIED = 3;
    }
  }
}

message ProcessingLog {
  LogSource source = 1;
  string requestor = 8;

  LogLevel level = 2;
  ErrorCode errorCode = 3;

  uint32 time = 4;
  string message = 5;

  string field = 6;
  string functionId = 7;

  string stackTrace = 9;

  enum LogSource {
    LOGSOURCE_UNKNOWN = 0;
    COPIER = 1;
    LOADER = 2;
    PARSER = 3;
    VALIDATOR = 4;
    AGGREGATOR = 5;
    UPLOADER = 6;
    MANUAL_REQUEST = 20;
  }

  enum LogLevel {
    LOGLEVEL_UNKNOWN = 0;
    DEBUG = 1;
    INFO = 2;
    WARNING = 3;
    ERROR = 4;
  }

  enum ErrorCode {
    ERRORCODE_UNKNOWN = 0;

    // HTTP status codes are 100 - 599 and would be considered execution errors
    reserved 100 to 599;

    OTHER_VALIDATION_ERROR = 600;


    OTHER_OPERATION_ERROR = 700;


    OTHER_EXECUTION_ERROR = 800;
    CONNECTION_ERROR = 801;
    TIMEOUT_ERROR = 802;

    OTHER_CONFIGURATION_ERROR = 900;
  }
}

message ApiLog {
  uint32 request_time = 1;
  string method = 2;
  string url = 3;
  string body = 4;
  uint32 response_code = 5;
  float request_duration = 6;


}

message RecordTimes {
  uint32 loadingStartTime = 1;
  uint32 loadingEndTime = 2;

  uint32 parsingStartTime = 3;
  uint32 parsingEndTime = 4;

  uint32 validatingStartTime = 5;
  uint32 validatingEndTime = 6;

  uint32 aggregatingStartTime = 7;
  uint32 aggregatingEndTime = 8;

  uint32 uploadingStartTime = 9;
  uint32 uploadingEndTime = 10;
}

message RecordStats {
  uint32 approximateRows = 1;

  uint32 loadedRecordsSuccess = 2;
  uint32 loadedRecordsError = 3;

  uint32 totalRows = 4;

  uint32 parsedRecordsSuccess = 5;
  uint32 parsedRecordsError = 6;

  uint32 validatedRecordsSuccess = 7;
  uint32 validatedRecordsError = 8;
  uint32 validationExecutionErrors = 13;
  uint32 validationErrors = 9;

  uint32 uploadedRecordsSuccess = 14;
  uint32 uploadedRecordsError = 15;
  uint32 uploadedRecordsSkipped = 16;

  map<string, StepStats> steps = 10;
}

message StepStats {
  uint32 input = 2;
  uint32 success = 3;
  uint32 failure = 4;
}

message OutputInstance {
  string id = 1;
  string outputId = 2;
  Status status = 3;

  uint32 startTime = 4;
  uint32 endTime = 5;

  repeated ProcessingLog log = 6;

  string outputFilename = 7;

  enum Status {
    OUTPUTINSTANCE_STATUS_UNKNOWN = 0;

    NEW = 1;
    PROCESSING = 2;
    ERROR = 3;
    SUCCESS = 4;
  }
}

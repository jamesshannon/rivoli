syntax = "proto3";
package rivoli.protos.config;

import "rivoli/protos/processing.proto";

message Partner {
  string id = 1;
  bool active = 2;
  string name = 3;

  string outgoingDirectory = 6;

  map<string, string> staticTags = 4;

  repeated FileType fileTypes = 5;
}

message FileType {
  string id = 1;
  bool active = 2;
  string name = 3;

  Format format = 4;
  repeated string fileMatches = 5;

  string filenameDateFormat = 13;
  string filenameDateRegexp = 8;

  repeated string filenameTagRegexps = 12;

  map<string, string> staticTags = 11;

  bool hasHeader = 14;
  string delimitedSeparator = 16;

  // how to model this? basically just a link
  RequireReview requireUploadReview = 9;

  uint32 uploadBatchSize = 15;
  string uploadBatchGroupKey = 17;

  repeated RecordType recordTypes = 7;

  repeated Output outputs = 10;

  // might need the concept of "grouping" or "reducing"
  // do this after the validations
  // group on one record type, skip other record types (but assume that they're
  // part of the groups)?
  // require all group members to be VALIDATED?
  // apply a callable (but give it a list of rows instead of one row)

  enum Format {
    FORMAT_UNKNOWN = 0;
    FLAT_FILE_DELIMITED = 1;
    FLAT_FILE_FIXED_WIDTH = 2;
  }

  enum RequireReview {
    REQUIRE_UNKNOWN = 0;
    ON_ERRORS = 1;
    ALWAYS = 2;
  }

  message DelimitedFileFormat {
    string hasHeader = 1;
    string delimiter = 2;
  }

  message ReferencedFiles {
    string fileTypeId = 1;
    bool requireMatchedDate = 2;
  }
}


message RecordType {
  // RecordTypes get a (sequential) integer so that they can be stored in each
  // record, and can be stored inside of a Enum field (alongside "hardcoded"
  // record types, like HEADER)
  uint32 id = 1;

  string name = 2;
  repeated string recordMatches = 4;

  repeated FieldType fieldTypes = 5;

  FunctionConfig successCheck = 6;
  FunctionConfig upload = 7;
  FunctionConfig rollback = 10;

  repeated FunctionConfig validations = 8;
  repeated FunctionConfig destinations = 9;
}

message RecordsView {

}

message FieldType {
  string id = 1;
  bool active = 2;
  string name = 3;
  string description = 4;

  bool isSharedKey = 11;

  bool isSensitive = 9;
  FunctionConfig renderer = 10;

  oneof field_location {
    string charRange = 5; // For fixed-length files
    string headerColumn = 6; // For delimited files with headers
    int32 columnIndex = 7; // For delimited files without headers
  }

  repeated FunctionConfig validations = 8;
}

message FunctionConfig {
  string id = 1;
  string functionId = 2;

  repeated string parameters = 3;
}


message Output {
  string id = 1;
  string name = 2;
  bool active = 3;

  OutputConfiguration configuration = 6;

  // In the future we can support other output destinations, like APIs
  DestinationFile file = 5;
  InteractiveReport table = 7;
}

message DestinationFile {
  string filePathPattern = 1;
  bool runAutomatic = 2;

  string fileFormat = 3;

  bool delimitedHasHeader = 4;
}

message InteractiveReport {
  bool requireConfirmation = 1;
}

message OutputConfiguration {
  // Record Configuration
  // Which records will be included?
  // There are other logical configurations, such as "All", or "Errors Only", or
  // "at least x", but those can be represented in the UI, at least in the
  // short term
  repeated rivoli.protos.processing.Record.Status recordStatuses = 6;

  bool allRecordTypes = 10;
  repeated uint32 recordTypeRef = 7;

  // Field Configuration
  // This is a fairly simple configuration -- this could get really complex
  // with the need to order and to, basically, recreate the entire Field/Record
  // validation scheme here. Might even need different sets of fields per
  // RecordType
  bool duplicateInputFields = 8;
  bool includeRecentErrors = 9;
}
